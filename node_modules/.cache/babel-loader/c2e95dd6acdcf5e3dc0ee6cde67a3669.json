{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT\\\\Desktop\\\\Mine\\\\React cwh\\\\inotebook\\\\src\\\\components\\\\context\\\\notes\\\\NoteState.js\",\n    _s = $RefreshSig$();\n\nimport NoteContext from \"./NoteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial); //Get all Notes\n\n  const getNotes = async (title, description, tag) => {\n    //API Call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjE5NDAyMGY3ZWRhMzNkYWU1YjdkNTg4In0sImlhdCI6MTYzNzkzNzE2NX0.xrqFohn6-uvsCLEPbqSJvNWVNlsUDos5SzwVPgrl3Vc\"\n      }\n    });\n    const json = await response.json();\n    setNotes(json);\n  }; // Add a Note\n\n\n  const addNote = async (title, description, tag) => {\n    //API Call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjE5NDAyMGY3ZWRhMzNkYWU1YjdkNTg4In0sImlhdCI6MTYzNzkzNzE2NX0.xrqFohn6-uvsCLEPbqSJvNWVNlsUDos5SzwVPgrl3Vc\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); //Adding a new Note\n\n    const note = {\n      \"_id\": \"619e8a7f5d85dacc9f3b4639\",\n      \"user\": \"6194020f7eda33dae5b7d588\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2021-11-24T18:54:55.516Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(note));\n  }; // Delete a Note\n\n\n  const deleteNote = async id => {\n    //API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjE5NDAyMGY3ZWRhMzNkYWU1YjdkNTg4In0sImlhdCI6MTYzNzkzNzE2NX0.xrqFohn6-uvsCLEPbqSJvNWVNlsUDos5SzwVPgrl3Vc\"\n      }\n    }); // const json = response.json();\n\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  }; // Edit a Note\n\n\n  const editNote = async (id, title, description, tag) => {\n    //API Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjE5NDAyMGY3ZWRhMzNkYWU1YjdkNTg4In0sImlhdCI6MTYzNzkzNzE2NX0.xrqFohn6-uvsCLEPbqSJvNWVNlsUDos5SzwVPgrl3Vc\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    }); //const json = response.json();\n    //Logic to edit in client\n\n    let newNotes = JSON.parse(JSON.stringify(notes));\n\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n\n      if (element._id === id) {\n        newNotes.title = title;\n        newNotes.description = description;\n        newNotes.tag = tag;\n        break;\n      }\n    }\n\n    setNotes(newNotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["C:/Users/KIIT/Desktop/Mine/React cwh/inotebook/src/components/context/notes/NoteState.js"],"names":["NoteContext","useState","NoteState","props","host","notesInitial","notes","setNotes","getNotes","title","description","tag","response","fetch","method","headers","json","addNote","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","children"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAMC,IAAI,GAAG,uBAAb;AACA,QAAMC,YAAY,GAAG,EAArB;AAIA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACI,YAAD,CAAlC,CANyB,CAQzB;;AACA,QAAMG,QAAQ,GAAG,OAAOC,KAAP,EAAcC,WAAd,EAA2BC,GAA3B,KAAmC;AAChD;AAEA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,IAAK,0BAAT,EAAoC;AAC5DU,MAAAA,MAAM,EAAE,KADoD;AAE5DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc;AAFT;AAFmD,KAApC,CAA5B;AAOA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB;AACAT,IAAAA,QAAQ,CAACS,IAAD,CAAR;AACH,GAZD,CATyB,CAsBzB;;;AACA,QAAMC,OAAO,GAAG,OAAOR,KAAP,EAAcC,WAAd,EAA2BC,GAA3B,KAAmC;AAC/C;AAEA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,IAAK,oBAAT,EAA8B;AACtDU,MAAAA,MAAM,EAAE,MAD8C;AAEtDC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc;AAFT,OAF6C;AAMtDG,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACX,QAAAA,KAAD;AAAQC,QAAAA,WAAR;AAAqBC,QAAAA;AAArB,OAAf;AANgD,KAA9B,CAA5B,CAH+C,CAa/C;;AACA,UAAMU,IAAI,GAAG;AACT,aAAO,0BADE;AAET,cAAQ,0BAFC;AAGT,eAASZ,KAHA;AAIT,qBAAeC,WAJN;AAKT,aAAOC,GALE;AAMT,cAAQ,0BANC;AAOT,aAAO;AAPE,KAAb;AASAJ,IAAAA,QAAQ,CAACD,KAAK,CAACgB,MAAN,CAAaD,IAAb,CAAD,CAAR;AACH,GAxBD,CAvByB,CAgDzB;;;AACA,QAAME,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC7B;AAEA,UAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,IAAK,yBAAwBoB,EAAG,EAApC,EAAuC;AAC/DV,MAAAA,MAAM,EAAE,QADuD;AAE/DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc;AAFT;AAFsD,KAAvC,CAA5B,CAH6B,CAU7B;;AACA,UAAMU,QAAQ,GAAGnB,KAAK,CAACoB,MAAN,CAAcL,IAAD,IAAU;AAAE,aAAOA,IAAI,CAACM,GAAL,KAAaH,EAApB;AAAwB,KAAjD,CAAjB;AACAjB,IAAAA,QAAQ,CAACkB,QAAD,CAAR;AACH,GAbD,CAjDyB,CA+DzB;;;AACA,QAAMG,QAAQ,GAAG,OAAOJ,EAAP,EAAWf,KAAX,EAAkBC,WAAlB,EAA+BC,GAA/B,KAAuC;AACpD;AAEA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAET,IAAK,yBAAwBoB,EAAG,EAApC,EAAuC;AAC/DV,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc;AAFT,OAFsD;AAM/DG,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACX,QAAAA,KAAD;AAAQC,QAAAA,WAAR;AAAqBC,QAAAA;AAArB,OAAf;AANyD,KAAvC,CAA5B,CAHoD,CAWpD;AAEA;;AACA,QAAIc,QAAQ,GAAGN,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACC,SAAL,CAAed,KAAf,CAAX,CAAf;;AACA,SAAK,IAAIwB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,QAAQ,CAACM,MAArC,EAA6CD,KAAK,EAAlD,EAAsD;AAClD,YAAME,OAAO,GAAGP,QAAQ,CAACK,KAAD,CAAxB;;AACA,UAAIE,OAAO,CAACL,GAAR,KAAgBH,EAApB,EAAwB;AACpBC,QAAAA,QAAQ,CAAChB,KAAT,GAAiBA,KAAjB;AACAgB,QAAAA,QAAQ,CAACf,WAAT,GAAuBA,WAAvB;AACAe,QAAAA,QAAQ,CAACd,GAAT,GAAeA,GAAf;AACA;AACH;AACJ;;AACDJ,IAAAA,QAAQ,CAACkB,QAAD,CAAR;AACH,GAzBD;;AA0BA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEnB,MAAAA,KAAF;AAASW,MAAAA,OAAT;AAAkBM,MAAAA,UAAlB;AAA8BK,MAAAA,QAA9B;AAAwCpB,MAAAA;AAAxC,KAA7B;AAAA,cACKL,KAAK,CAAC8B;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA/FD;;GAAM/B,S;;KAAAA,S;AAgGN,eAAeA,SAAf","sourcesContent":["import NoteContext from \"./NoteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n    const host = \"http://localhost:5000\";\r\n    const notesInitial = []\r\n\r\n\r\n    \r\n    const [notes, setNotes] = useState(notesInitial);\r\n\r\n    //Get all Notes\r\n    const getNotes = async (title, description, tag) => {\r\n        //API Call\r\n        \r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjE5NDAyMGY3ZWRhMzNkYWU1YjdkNTg4In0sImlhdCI6MTYzNzkzNzE2NX0.xrqFohn6-uvsCLEPbqSJvNWVNlsUDos5SzwVPgrl3Vc\"\r\n            },    \r\n        });\r\n        const json = await response.json();\r\n        setNotes(json);\r\n    }\r\n    // Add a Note\r\n    const addNote = async (title, description, tag) => {\r\n        //API Call\r\n        \r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjE5NDAyMGY3ZWRhMzNkYWU1YjdkNTg4In0sImlhdCI6MTYzNzkzNzE2NX0.xrqFohn6-uvsCLEPbqSJvNWVNlsUDos5SzwVPgrl3Vc\"\r\n            },\r\n            body: JSON.stringify({title, description, tag})\r\n        });\r\n\r\n\r\n        //Adding a new Note\r\n        const note = {\r\n            \"_id\": \"619e8a7f5d85dacc9f3b4639\",\r\n            \"user\": \"6194020f7eda33dae5b7d588\",\r\n            \"title\": title,\r\n            \"description\": description,\r\n            \"tag\": tag,\r\n            \"date\": \"2021-11-24T18:54:55.516Z\",\r\n            \"__v\": 0\r\n        }\r\n        setNotes(notes.concat(note));\r\n    }\r\n    // Delete a Note\r\n    const deleteNote = async (id) => {\r\n        //API Call\r\n         \r\n        const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjE5NDAyMGY3ZWRhMzNkYWU1YjdkNTg4In0sImlhdCI6MTYzNzkzNzE2NX0.xrqFohn6-uvsCLEPbqSJvNWVNlsUDos5SzwVPgrl3Vc\"\r\n            },\r\n        });\r\n        // const json = response.json();\r\n        const newNotes = notes.filter((note) => { return note._id !== id });\r\n        setNotes(newNotes);\r\n    }\r\n    // Edit a Note\r\n    const editNote = async (id, title, description, tag) => {\r\n        //API Call\r\n         \r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'auth-token': \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjE5NDAyMGY3ZWRhMzNkYWU1YjdkNTg4In0sImlhdCI6MTYzNzkzNzE2NX0.xrqFohn6-uvsCLEPbqSJvNWVNlsUDos5SzwVPgrl3Vc\"\r\n            },\r\n            body: JSON.stringify({title, description, tag})\r\n        });\r\n        //const json = response.json();\r\n\r\n        //Logic to edit in client\r\n        let newNotes = JSON.parse(JSON.stringify(notes));\r\n        for (let index = 0; index < newNotes.length; index++) {\r\n            const element = newNotes[index];\r\n            if (element._id === id) {\r\n                newNotes.title = title;\r\n                newNotes.description = description;\r\n                newNotes.tag = tag;\r\n                break;\r\n            }\r\n        }\r\n        setNotes(newNotes);\r\n    }\r\n    return (\r\n        <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote, getNotes }}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\nexport default NoteState;"]},"metadata":{},"sourceType":"module"}